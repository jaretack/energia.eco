// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Fonts
@mixin fonts($font) {
    @each $name, $size in $font-sizes {
        @if $font == $name {
            font-size: $size;
            line-height: initial;
        }
    }
}

/// Gradient
@mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    } @else if $orientation == 'diagonal' {
        background: -webkit-linear-gradient(135deg, $start-color, $end-color);
        background: linear-gradient(135deg, $start-color, $end-color);
    } @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}
// Respond to
@mixin respond-to($media) {
    @for $i from 1 through length($breakpoints) {
        $breakpoint: nth($breakpoints, $i);
        $name: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);

        @if $media == $name {
            @if $i == 1 {
                @media (max-width: #{$value})  { @content; }
            } @else if $i == length($breakpoints) {
                @media (min-width: #{$value})  { @content; }
            } @else {
                $next_breakpoint: nth($breakpoints, $i + 1);
                $next_name: nth($next_breakpoint, 1);
                $next_value: nth($next_breakpoint, 2);

                @media (min-width: #{$value}) and (max-width: #{$next_value - 1px}) { @content; }
            }
        }
    }
}

// Respond from
@mixin respond-from($media) {
    @each $breakpoint in $breakpoints {
        @if $media == nth($breakpoint, 1) {
            @media (min-width: #{nth($breakpoint, 2)})  { @content; }
        }
    }
}

// Respond until
@mixin respond-until($media) {
    @each $breakpoint in $breakpoints {
        @if $media == nth($breakpoint, 1) {
            @media (max-width: #{nth($breakpoint, 2)})  { @content; }
        }
    }
}

// Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}
